package module5;

import java.util.Arrays;

public class SquareMatrix {
    double[][] elements;
    int size;

    // Returns identity matrix of given size
    public static SquareMatrix unitMatrix(int size) {
        double[][] unit = new double[size][size];
        for (int i = 0; i < size; ++i) unit[i][i] = 1.0;
        SquareMatrix m = null;
        try {
            m = new SquareMatrix(unit);
        } catch (Exception e) {
            throw new RuntimeException("Bug in SquareMatrix.unitMatrix()");
        }
        return m;
    }

    // Constructs object representing matrix with given elements.
    // Throws exception if input array is not square, but assumes all rows
    // of input have same length.
    // Does NOT copy input array, so user must ensure array is not modified
    // after matrix has been constructed.
    public SquareMatrix(double[][] elements) throws Exception {
        int nRows = elements.length;
        int nCols = elements[0].length;
        if (nRows != nCols) throw new Exception(
                "Array not square: "+nRows+" rows, "+nCols+" columns"
                );
        this.elements = elements;
        this.size = nRows;
    }

    // String with each row on a separate line
    public String toString() {
        StringBuilder s = new StringBuilder();
        for (double[] row : elements) {
            for (double elem : row) {
                s.append(" "+elem);
            }
            s.append("\n");
        }
        return s.toString();
    }

    // Returns matrix product this * that
    public SquareMatrix multiply(SquareMatrix that) throws Exception {
        if (that.size != this.size) throw new Exception(
                "Can't multiply matrices with different sizes: "+this.size+" and "+that.size
                );
        double[][] product = new double[size][size]; // elements initialized to 0.0
        for (int i = 0; i < size; ++i) {
            for (int j = 0; j < size; ++j) {
                for (int k = 0; k < size; ++k) {
                    product[i][j] += this.elements[i][k] * that.elements[k][j];
                }
            }
        }
        return new SquareMatrix(product);
    }

    // Returns matrix sum this + that
    public SquareMatrix add(SquareMatrix that) throws Exception {
        if (that.size != this.size) throw new Exception(
                "Can't subtract matrices with different sizes: "+this.size+" and "+that.size
                );
        double[][] diff = new double[size][size];
        for (int i = 0; i < size; ++i) {
            for (int j = 0; j < size; ++j) {
                diff[i][j] = this.elements[i][j] + that.elements[i][j];
            }
        }
        return new SquareMatrix(diff);
    }

    // Returns matrix difference this - that
    public SquareMatrix subtract(SquareMatrix that) throws Exception {
        if (that.size != this.size) throw new Exception(
                "Can't subtract matrices with different sizes: "+this.size+" and "+that.size
                );
        double[][] diff = new double[size][size];
        for (int i = 0; i < size; ++i) {
            for (int j = 0; j < size; ++j) {
                diff[i][j] = this.elements[i][j] - that.elements[i][j];
            }
        }
        return new SquareMatrix(diff);
    }

    // Generated by Eclipse: Source -> Generate hashCode() and equals()...
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Arrays.hashCode(elements);
        result = prime * result + size;
        return result;
    }

    // Generated by Eclipse: Source -> Generate hashCode() and equals()...
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        SquareMatrix other = (SquareMatrix) obj;
        if (!Arrays.deepEquals(elements, other.elements))
            return false;
        if (size != other.size)
            return false;
        return true;
    }
}